"""Decorators used in the Application."""

from asyncio import Lock
from collections import defaultdict
from functools import wraps
from typing import Callable, Coroutine

from bot import bot
from framework.flow_connector import FlowConnector, FlowConnectorEvents
from i18n_gettext import _
from models import Channel
from settings import settings
from utils.loguru_logging import logger
from utils.templated_i18n import TemplatedString


def fail_safely(function: Callable[..., Coroutine]):
    """Fail safely and send the message to the User about the issue"""

    @wraps(function)
    async def wrapper(*args, **kwargs):
        try:
            return await function(*args, **kwargs)
        except Exception as exception:
            # Log the exception with the traceback
            logger.exception(exception)

            # Check if any of the arguments is a FlowConnector
            flow_connector: FlowConnector | None = next(
                (arg for arg in args if isinstance(arg, FlowConnector)),
                None,
            )

            substitute_dict = {
                "function_name": function.__name__,
                "exception": exception,
                "exception_type": type(exception),
                "exception_text": str(exception),
                "user_id": flow_connector.user.id if flow_connector else "N/A",
                "user_name": flow_connector.user.name if flow_connector else "N/A",
                "user_discriminator": flow_connector.user.discriminator if flow_connector else "N/A",
            }

            if flow_connector:
                # Send a message to the User about the issue
                if settings.DEBUG:
                    error_text = _("fail_safely.error_text.debug").safe_substitute(**substitute_dict)
                else:
                    error_text = _("fail_safely.error_text").safe_substitute(**substitute_dict)
                await flow_connector.message.reply(error_text)
            else:
                logger.error(f"FlowConnector is not set for the function: {function.__name__} in {args=}")

            if not (global_errors_channel_obj := await Channel.get_or_none(used_for="global_errors")):
                logger.error("Global errors channel is not set.")
                raise exception

            if settings.DEBUG:
                await bot.get_channel(global_errors_channel_obj.id).send(
                    _("fail_safely.global_error_text.debug").safe_substitute(**substitute_dict)
                )
            else:
                await bot.get_channel(global_errors_channel_obj.id).send(
                    _("fail_safely.global_error_text").safe_substitute(**substitute_dict)
                )

            # TODO: [01.04.2024 by Mykola] Should we raise an exception, or just logging it is enough?
            raise exception

    return wrapper


GLOBAL_USER_LOCKS: defaultdict[int, Lock] = defaultdict(Lock)


def forbid_concurrent_execution(
    keep_extra_messages=False,
    extra_messages_reply: TemplatedString | None = _("forbidden_concurrent_execution.extra_messages_reply"),
) -> Callable:
    """Forbid concurrent execution of the function for the same User."""

    def decorator(function: Callable[..., Coroutine]):
        """The actual decorator."""

        @wraps(function)
        async def wrapper(*args, **kwargs):
            # Get the `FlowConnector` from the arguments
            flow_connector: FlowConnector | None = next(
                (arg for arg in args if isinstance(arg, FlowConnector)),
                None,
            )

            if not flow_connector:
                logger.error(f"FlowConnector is not set for the function: {function.__name__} in {args=}")

                return await function(*args, **kwargs)

            # Get the User's ID
            user_id = flow_connector.user.id

            # Get the User's lock
            user_lock = GLOBAL_USER_LOCKS[user_id]

            # Check if the User's lock is already acquired
            if user_lock.locked() and not keep_extra_messages:
                # Send a message to the User saying that the function is already running
                return await flow_connector.message.reply(extra_messages_reply)

            # With the lock acquired, execute the function
            async with user_lock:
                return await function(*args, **kwargs)

        return wrapper

    return decorator


def with_constant_typing(
    run_only_on_events: list[FlowConnectorEvents] | None = None,
) -> Callable:
    """Send a typing indicator while executing the function."""

    def decorator(function: Callable[..., Coroutine]) -> Callable[..., Coroutine]:
        """The actual decorator."""

        @wraps(function)
        async def wrapper(*args, **kwargs):
            # Check if any of the arguments is a FlowConnector
            flow_connector: FlowConnector | None = next(
                (arg for arg in args if isinstance(arg, FlowConnector)),
                None,
            )

            if flow_connector and (not run_only_on_events or flow_connector.event in run_only_on_events):
                async with flow_connector.channel.typing():
                    return await function(*args, **kwargs)

            # If the FlowConnector is not found, just execute the function
            return await function(*args, **kwargs)

        return wrapper

    return decorator
