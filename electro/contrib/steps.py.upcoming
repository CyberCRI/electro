"""The [extra/contrib] steps that can be used in the flow. Specific to the project."""

import asyncio
import io
import json
import random
import textwrap
import typing
from abc import ABC
from dataclasses import dataclass
from pathlib import Path
from tempfile import NamedTemporaryFile
from typing import Annotated

import discord
from httpx import ReadTimeout
from openai.types import ImagesResponse
from openai.types.beta.threads.run_submit_tool_outputs_params import ToolOutput

from decorators import with_constant_typing
from framework.contrib.assistants_storage_buckets import BaseAssistantsStorageBucket
from framework.contrib.storage_buckets import BasePostgresStorageBucket, BaseStorageBucket, StorageBucketElement
from framework.contrib.views import BaseView, ChooseOneOptionView, StorageMixin, ViewStepFinished
from framework.flow_connector import FlowConnector, FlowConnectorEvents
from framework.flow_step import BaseFlowStep, FlowStepDone, MessageFlowStep, MessageFormatterMixin
from framework.substitutions import BaseSubstitution
from httpx_client import httpx_client
from .settings import settings
from utils.buttons import FrameworkButtonStyle
from utils.images import get_combined_image
from utils.loguru_logging import logger
from utils.openai_client import async_openai_client
from utils.templated_i18n import TemplatedString


class BaseImagesStepStorageBucket(BaseStorageBucket, ABC):
    """The base class for the storage bucket for the images step."""

    __abstract = True

    buttons_sent_to_images: StorageBucketElement[dict[str, str]]
    images_sent_in_this_step: StorageBucketElement[list[str]]
    image_chosen: StorageBucketElement[str]

    load_more_button_custom_id: StorageBucketElement[str]


class BasePostgresImagesStepStorageBucket(BasePostgresStorageBucket, BaseImagesStepStorageBucket):
    """The base class for the storage bucket for the images step."""

    __abstract = True


class LoadMore(Exception):
    """The exception that is raised when the user wants to load more images."""

    pass


class ImagesButtonsView(ChooseOneOptionView):
    """The view that allows the user to choose an image."""

    load_more_button_label: str

    def __init__(self, load_more_button_label: str, **kwargs):
        """Initialize the view."""
        super().__init__(options=[], **kwargs)

        self.load_more_button_label = load_more_button_label

    @property
    def load_more_button(self):
        """Get the load more button."""
        # TODO: [29.09.2023 by Mykola] Make this more secure: what if there are two buttons with
        #  the "load more" label?
        for child in self.children:
            if isinstance(child, discord.ui.Button) and child.label == self.load_more_button_label:
                return child

        raise ValueError("The load more button is not found.")

    async def get_or_create_for_connector(
        self,
        flow_connector: FlowConnector,
        dynamic_buttons: list[str | discord.Button] | None = None,
        force_init: bool = False,
        force_get: bool = False,
        from_step_run: bool = False,
    ) -> typing.Self:
        if not dynamic_buttons and not force_get:
            raise ValueError("The dynamic buttons are empty.")

        return await super().get_or_create_for_connector(
            flow_connector, dynamic_buttons=dynamic_buttons, force_init=force_init
        )

    async def get_static_buttons(self, flow_connector: FlowConnector) -> list[str]:
        """Get the buttons for the view."""
        return [*self.options, self.load_more_button_label]

    def remove_load_more_button(self):
        """Remove the load more button."""
        self.remove_item(self.load_more_button)


class ImageChooseStep(BaseFlowStep, MessageFormatterMixin, StorageMixin):
    """The step that allows the user to choose an image."""

    choose_image_message: TemplatedString | None = None

    images: list[Path]
    n_images_per_page: int = 5
    max_images_to_show: int | None = None

    buttons_style: FrameworkButtonStyle = FrameworkButtonStyle.primary

    _images_view: ImagesButtonsView

    image_chosen_message: TemplatedString | None = None

    images_chosen_storage: StorageBucketElement | None = None

    _images_step_storage: typing.Type[BaseImagesStepStorageBucket] | None = None

    _testing: bool = False

    # TODO: [29.09.2023 by Mykola] Make it state-less
    _sent_messages_with_views_for_user: dict[int, list[discord.Message]]

    def __init__(
        self,
        choose_image_message: TemplatedString | None,
        images: list[Path],
        images_per_page: int = 5,
        max_images_to_show: int | None = None,
        buttons_style: FrameworkButtonStyle = FrameworkButtonStyle.primary,
        substitutions: dict[str, str] | None = None,
        load_more_images_button: TemplatedString | None = None,
        image_chosen_message: TemplatedString | None = None,
        images_step_storage: typing.Type[BaseImagesStepStorageBucket] | None = None,
        _testing: bool = False,
    ):
        """Initialize the step."""
        self.choose_image_message = choose_image_message or TemplatedString("Choose an image:")

        if not images:
            raise ValueError(f"The images list is empty in {self.__class__.__name__}.")

        self.images = images
        self.max_images_to_show = max_images_to_show
        self.buttons_style = buttons_style or self.buttons_style

        if len(images) < images_per_page:
            raise ValueError("The number of images is less than the number of images per page.")
        self.n_images_per_page = images_per_page

        self._images_view = ImagesButtonsView(load_more_images_button or TemplatedString("Load more images"))

        self.image_chosen_message = image_chosen_message or TemplatedString("You have chosen the image: {image_name}")

        if not images_step_storage:
            # TODO: [29.09.2023 by Mykola] Make sure we have some other storage to store at least
            #  the `custom_id` of the `load_more` button. Otherwise, we won't be able to process
            raise ValueError("The images step storage is empty. Unable to continue.")

        self._images_step_storage = images_step_storage
        self._testing = _testing

        self._sent_messages_with_views_for_user = {}  # re-set for each instance

    @staticmethod
    async def _send_images(
        connector: FlowConnector,
        choose_image_message: str,
        all_images_options: list[Path],
        n_images_per_page: int,
        images_view: ImagesButtonsView,
        images_step_storage: typing.Type[BaseImagesStepStorageBucket],
        max_images_to_show: int | None = None,
        buttons_style: FrameworkButtonStyle = FrameworkButtonStyle.primary,
    ):
        """
        Send the images to the user.

        The idea behind making this method static is that this way we can reduce the mental load
        when working with the method: we don't need to think about where the objects are coming
        from, we just pass the parameters and get the result.
        """
        # Get the already selected images at this step
        images_already_sent: list[str] = await images_step_storage.images_sent_in_this_step.get_data(default=[])

        # Get the images that are available to send
        available_images: list[Path] = [image for image in all_images_options if image.name not in images_already_sent]

        images_on_page: list[Path] = random.sample(available_images, n_images_per_page)

        combined_image: NamedTemporaryFile = get_combined_image(images_on_page)

        # From here on, we work with images' names rather than images themselves as `Path` objects
        images_names: list[str] = [image.name for image in images_on_page]

        # Save that we've sent these particular images to the user
        await images_step_storage.images_sent_in_this_step.set_data([*images_already_sent, *images_names])

        images_buttons: list[discord.Button] = images_view.strings_to_buttons(
            [str(i) for i, _ in enumerate(images_names, start=1)], buttons_style=buttons_style
        )

        # Get the buttons sent related to the images
        buttons_sent_to_images: dict[str, str] = await images_step_storage.buttons_sent_to_images.get_data(default={})

        # Save/update the buttons sent related to the images
        await images_step_storage.buttons_sent_to_images.set_data(
            buttons_sent_to_images
            | {
                # TODO: [07.09.2023 by Mykola] Is `zip` here really safe?
                button.custom_id: image_name
                for button, image_name in zip(images_buttons, images_names)
            }
        )

        view_to_send = await images_view.get_or_create_for_connector(
            connector, dynamic_buttons=images_buttons, force_init=True
        )

        if max_images_to_show and (
            len(await images_step_storage.images_sent_in_this_step.get_data(default=[])) > max_images_to_show
        ):
            # Remove the load more button from the newly generated view
            view_to_send.remove_load_more_button()

        else:
            # Save the id of the Load More button
            await images_step_storage.load_more_button_custom_id.set_data(view_to_send.load_more_button.custom_id)

        return await connector.channel.send(
            choose_image_message,
            file=discord.File(combined_image.file),
            view=view_to_send,
        )

    async def send_images(self, connector: FlowConnector, *, with_message: bool = True):
        """Send the images to the user."""
        choose_image_message: str | None = (
            await self._get_formatted_message(self.choose_image_message, connector) if with_message else None
        )

        images_message_with_view = await self._send_images(
            connector,
            choose_image_message,
            self.images,
            self.n_images_per_page,
            self._images_view,
            self._images_step_storage,
            max_images_to_show=self.max_images_to_show,
            buttons_style=self.buttons_style,
        )

        self._sent_messages_with_views_for_user.setdefault(connector.user.id, []).append(images_message_with_view)

        return images_message_with_view

    @with_constant_typing()
    async def run(self, connector: FlowConnector):
        """Initialize a View and send it to the user."""
        # Empty the storage
        await self._images_step_storage.empty()

        return await self.send_images(connector, with_message=True)

    def _check_connector_can_be_processed(self, connector: FlowConnector):
        if not connector.event == FlowConnectorEvents.BUTTON_CLICK:
            logger.warning(
                f"View {self.__class__.__name__} received an event that is not BUTTON_CLICK: " f"{connector.event}"
            )

        if connector.interaction is None:
            raise FlowStepDone("The interaction is None.")

    async def set_chosen_image(self, connector: FlowConnector, image_name: str, message_to_edit: discord.Message):
        """
        Remove all the views for selecting the images, remove the combined image and replace it
        with the chosen image.
        """

        # Get all the messages sent for this connector
        try:
            messages_with_views_for_user: list[discord.Message] = self._sent_messages_with_views_for_user[
                connector.user.id
            ]
        except KeyError:
            raise ValueError("There are no messages with views for this user.")

        # Remove all the views for selecting the images
        for message_with_view in messages_with_views_for_user:
            if message_with_view.id == message_to_edit.id:
                continue
            else:
                await message_with_view.delete()

        # Delete all the messages with views for this user
        del self._sent_messages_with_views_for_user[connector.user.id]

        # Remove the combined image and replace it with the chosen image
        return await message_to_edit.edit(
            content=await self._get_formatted_message(self.image_chosen_message, connector, image_name=image_name),
            file=discord.File([image for image in self.images if image.name == image_name][0]),
            view=None,
            attachments=[],
        )

    async def process_response(self, connector: FlowConnector):
        """Process the response."""
        # Check that the connector can be processed
        self._check_connector_can_be_processed(connector)

        if connector.interaction:
            try:
                if self._images_step_storage:
                    # Check if the "load_more" button has been clicked
                    if connector.interaction.data["custom_id"] == (
                        await self._images_step_storage.load_more_button_custom_id.get_data()
                    ):
                        # Remove the button from the view
                        # TODO: [29.09.2023 by Mykola] Maybe abstract this away?
                        view_for_connector = await self._images_view.get_or_create_for_connector(
                            connector, force_get=True
                        )
                        view_for_connector.remove_load_more_button()
                        await connector.interaction.response.edit_message(view=view_for_connector)

                        raise LoadMore()

                    # Get the buttons sent related to the images
                    buttons_sent_to_images: dict[str, str] = (
                        await self._images_step_storage.buttons_sent_to_images.get_data(default={})
                    )

                    # Get the image name that the user has chosen
                    image_name: str = buttons_sent_to_images[connector.interaction.data["custom_id"]]

                    # Save that this image has been chosen
                    await self._images_step_storage.image_chosen.set_data(image_name)

                    # TODO: [07.09.2023 by Mykola] Save that this image has been chosen
                    #  (so we don't get it on the next step. how?).

                    await self.set_chosen_image(connector, image_name, connector.interaction.message)

                    raise ViewStepFinished()

                # Should never be reached
                return await self._images_view.process_interaction(connector)
            except LoadMore:
                return await self.send_images(connector, with_message=False)
            except ViewStepFinished as exception:
                raise FlowStepDone() from exception


class RankingOptionsView(ChooseOneOptionView):
    """The view that allows the user to rank the options."""

    def __init__(
        self,
        options: list[str] | typing.Callable[[], typing.Awaitable[list[str]]],
        answers_storage: StorageBucketElement | None = None,
        reverse_answers: bool = False,
        **kwargs,
    ):
        """Initialize the view."""

        # Reverse the answers, so that first answer (click) will be the last one in
        # `self.answers_storage`
        self.reverse_answers = reverse_answers

        super().__init__(options, answers_storage, **kwargs)

    async def _on_view_created(self, flow_connector: FlowConnector, view: BaseView):
        """When the view is created, set the user answer to an empty list."""
        await self._set_user_answer([])

        return await super()._on_view_created(flow_connector, view)

    async def process_button_click(self, button: discord.ui.Button, flow_connector: FlowConnector):
        """Process the button click."""

        # Save the answer
        user_answers: list[str] | None = await self._get_user_answer() or []
        user_answers.append(button.label)
        await self._set_user_answer(user_answers)

        # Remove the button
        self.remove_item(button)

        # If there are no more buttons, finish the step
        if not self.children:
            if self.reverse_answers:
                # Reverse the answers
                await self._set_user_answer(user_answers[::-1])

            # Remove the view
            await flow_connector.interaction.response.edit_message(view=None)

            # Finish the step
            raise ViewStepFinished()

        # Update the message
        await flow_connector.interaction.response.edit_message(view=self)


@dataclass
class TimerStep(BaseFlowStep):
    """The step that just counts down the timer and then moves to the next step."""

    minutes: int | None = None
    seconds: int | None = None

    non_blocking = True

    async def run(self, connector: FlowConnector):
        """Run the step: count down the timer."""
        sleeping_time: int = (self.minutes or 0) * 60 + (self.seconds or 0)

        if settings.DEBUG:
            # Vastly reduce the sleeping time in DEBUG mode
            sleeping_time: int = int(sleeping_time / 60 * 2)

        logger.info(f"{self.__class__}: Sleeping for {sleeping_time} seconds...")
        await asyncio.sleep(sleeping_time)

        if self.non_blocking:
            raise FlowStepDone()

    async def process_response(self, connector: FlowConnector):
        """Process the response. Should never be reached since the step is non-blocking."""
        raise FlowStepDone()


@dataclass
class GPTAssistantStep(BaseFlowStep, MessageFormatterMixin):
    """The step that runs OpenAI Assistant."""

    assistant_id: str

    start_message: TemplatedString | None = None
    start_prompt: TemplatedString | None = None

    assistant_step_storage: typing.Type[BaseAssistantsStorageBucket] | None = None

    functions: dict[str, typing.Callable[[FlowConnector, ...], typing.Awaitable[None]]] | None = None
    auto_add_continue_function: bool = True
    any_function_triggers_flow_step_done: bool = False

    default_action_output_instead_of_none: str | None = "Executed successfully."

    _max_message_length: int = settings.MESSAGE_MAX_LENGTH

    @staticmethod
    async def _continue(_connector: FlowConnector, *_, **__):
        """Continue the flow."""
        if any((_, __)):
            logger.warning(f"Got unexpected args: {_=}, {__=}")

        raise FlowStepDone()

    def __post_init__(self):
        """Post-initialize the step."""
        if not self.start_message and not self.start_prompt:
            raise ValueError("Either `start_message` or `start_prompt` should be set.")

        if self.auto_add_continue_function:
            self.functions = self.functions or {}
            self.functions["continue"] = self._continue
            self.functions["exit_from_the_assistant"] = self._continue

    def _split_message(self, message: str) -> list[str]:
        """Split the message into chunks."""
        return textwrap.wrap(message, width=self._max_message_length, replace_whitespace=False, break_long_words=False)

    async def get_assistant_response(
        self, prompt: str, connector: FlowConnector
    ) -> tuple[Annotated[str, "response_message_text"], Annotated[bool, "raise_flow_step_done"]]:
        """Get the assistant response."""
        logger.info(f"Getting the Assistant response for {prompt=}, {connector.user.id=}")

        assistant = await async_openai_client.beta.assistants.retrieve(self.assistant_id)

        message_text: str = prompt

        # Get the Thread ID from the storage
        thread_id: str | None = await self.assistant_step_storage.thread_id.get_data()

        if not thread_id:
            # Create a Thread
            thread = await async_openai_client.beta.threads.create()

            # Save the Thread ID to the Storage
            await self.assistant_step_storage.thread_id.set_data(thread.id)

        else:
            thread = await async_openai_client.beta.threads.retrieve(thread_id)

        thread_message = await async_openai_client.beta.threads.messages.create(
            thread_id=thread.id, role="user", content=message_text
        )
        logger.info(f"Created a message in Assistants API: {thread_message=}, {thread_id=}, {connector.user.id=}")

        run = await async_openai_client.beta.threads.runs.create(
            thread_id=thread.id,
            assistant_id=assistant.id,
        )
        logger.info(f"Run the thread with: {thread_message=}, {thread_id=}, {connector.user.id=}. Got {run=}")

        raise_flow_step_done = False
        while True:
            for retry_n in range(1, 11):
                logger.info(f"Trying to retrieve a run. Try #{retry_n}: {run.id=}")
                try:
                    run = await async_openai_client.beta.threads.runs.retrieve(
                        thread_id=thread.id, run_id=run.id, timeout=10
                    )
                    logger.info(f"Retrieved a run: {run=} for {thread_id=}")
                    break
                except ReadTimeout as exception:
                    logger.exception(
                        f"Hit a ReadTimeout while retrieving a run: {thread_id=}, {run.id=}", exc_info=exception
                    )

                    logger.info("Sleeping for 1 second")
                    await asyncio.sleep(1)

            if run.status == "completed":
                break

            elif run.status == "requires_action":
                # TODO: [01.02.2024 by Mykola] Move this somewhere up the execution tree
                if not self.functions:
                    raise ValueError(f"The functions are not set in {self.__class__.__name__}")

                tool_outputs: list[ToolOutput] = []
                # Get the action to perform
                for tool_call in run.required_action.submit_tool_outputs.tool_calls:
                    # Get the function to execute
                    function_to_execute = self.functions.get(tool_call.function.name)

                    if not function_to_execute:
                        raise ValueError(f"The function to execute is not found: {tool_call.function.name}")

                    try:
                        # Execute the function
                        action_output = await function_to_execute(connector, **json.loads(tool_call.function.arguments))
                    except FlowStepDone:
                        # If the function raised `FlowStepDone`, then we should finish the step
                        raise_flow_step_done = True

                        action_output = None

                    if self.any_function_triggers_flow_step_done:
                        raise_flow_step_done = True

                    # Add the output to the tool outputs
                    tool_outputs.append(
                        ToolOutput(
                            tool_call_id=tool_call.id,
                            output=action_output or self.default_action_output_instead_of_none,
                        )
                    )

                # Submit tool outputs
                await async_openai_client.beta.threads.runs.submit_tool_outputs(
                    thread_id=thread.id,
                    run_id=run.id,
                    tool_outputs=tool_outputs,
                )

            elif run.status == "in_progress":
                logger.debug(f"Run {run.id} is in progress. Sleeping for 1 second...")
                await asyncio.sleep(1)

            elif run.status == "queued":
                logger.debug(f"Run {run.id} is queued. Sleeping for 1 second...")
                await asyncio.sleep(1)

            else:
                raise ValueError(f"The Run status is unexpected: {run.status}")

        thread_messages = await async_openai_client.beta.threads.messages.list(thread_id=thread.id)
        response_message_text: str = thread_messages.data[0].content[0].text.value

        return response_message_text, raise_flow_step_done

    @with_constant_typing()
    async def run(self, connector: FlowConnector):
        if not self.assistant_id:
            logger.error(f"The Assistant ID is not set in {self.__class__.__name__}")
            raise FlowStepDone()

        await self.assistant_step_storage.empty()

        if self.start_prompt:
            formatted_prompt = await self._get_formatted_message(self.start_prompt, connector)

            if not formatted_prompt:
                raise ValueError("The formatted prompt is empty.")

            try:
                response_message_text, raise_flow_step_done = await self.get_assistant_response(
                    prompt=formatted_prompt, connector=connector
                )
            except Exception as exception:
                logger.exception(
                    f"Got an exception while processing the response: {formatted_prompt=}", exc_info=exception
                )

                await self.assistant_step_storage.empty()

                raise FlowStepDone()

            sent_message: discord.Message = [
                await connector.message.channel.send(content=content)
                for content in self._split_message(response_message_text)
            ][0]

            if raise_flow_step_done:
                raise FlowStepDone()

            return sent_message

        return [
            await connector.channel.send(message_part)
            for message_part in self._split_message(await self._get_formatted_message(self.start_message, connector))
        ][0]

    @with_constant_typing()
    async def process_response(self, connector: FlowConnector):
        """Process the response from the User. Usually it's the first prompt to the Assistant."""
        try:
            response_message_text, raise_flow_step_done = await self.get_assistant_response(
                prompt=connector.message.content, connector=connector
            )
        except Exception as exception:
            logger.exception(
                f"Got an exception while processing the response: {connector.message.content=}", exc_info=exception
            )

            await self.assistant_step_storage.empty()

            raise FlowStepDone()

        sent_message: discord.Message = await connector.message.channel.send(content=response_message_text)

        if raise_flow_step_done:
            raise FlowStepDone()

        return sent_message


@dataclass
class DalleImageStep(MessageFlowStep):
    """The step that runs OpenAI DALL-E to generate an image."""

    prompt: str | TemplatedString | None = None

    def __post_init__(self):
        """Post-initialize the step."""
        if not self.prompt:
            raise ValueError(f"{self.__class__.__name__}: The `prompt` is not set.")

    @staticmethod
    async def _generate_image(prompt: str, model: str = settings.OPENAI_DALLE_MODEL) -> io.BytesIO:
        """Generate an image from the prompt."""
        logger.info(f"Generating an image from the prompt: {prompt=}")
        images_response: ImagesResponse = await async_openai_client.images.generate(
            model=model,
            prompt=prompt,
            n=1,  # Generate only one image. # TODO: [28.02.2024 by Mykola] Make it configurable?
        )
        logger.debug(f"Got the images response: {images_response=} for {prompt=} and {model=}")

        image_url = images_response.data[0].url
        logger.debug(f"Got the image URL: {image_url=}")

        image_data = await httpx_client.get(image_url)
        logger.debug(f"Got the image data: {image_data=} for {image_url=}. Content length: {len(image_data.content)}")

        logger.info(f"Generated an image from the prompt: {prompt=}")
        return io.BytesIO(image_data.content)

    async def _get_files_to_send(self, connector: FlowConnector) -> list[discord.File]:
        """Get the files to send. Append the generated image to the list of files."""
        generated_image = await self._generate_image(await self._get_formatted_message(self.prompt, connector))

        return [discord.File(generated_image, filename="dalle_image.jpg")] + await super()._get_files_to_send(connector)


@dataclass
class UpdateStorageStep(BaseFlowStep):
    """The step that updates the storage."""

    storage_bucket_element: StorageBucketElement

    value: typing.Any

    async def run(self, connector: FlowConnector):
        """Run the step."""
        await self.storage_bucket_element.set_data(self.value)

        raise FlowStepDone()

    async def process_response(self, connector: FlowConnector):
        """Process the response."""
        raise FlowStepDone()
